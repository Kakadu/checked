# $URL: dd $
# $Revision: 19 $

# define macros that creates directiries
mkinstalldirs = $(INSTALL_SCRIPT) -d

# define macros that creates temporary files
if MINGW32
    MKTEMP=$(top_srcdir)/config/mktemp.sh
else
    MKTEMP=mktemp
endif

# sort sources before use
# (sorting is required for correct link order)
SORTED := $(shell $(OCAMLDSORT) $(SOURCES))

# CMO - all compiled objects
CMO := $(SOURCES:.ml=.cmo)

# all compiled interfaces
CMI := $(CMO:.cmo=.cmi)
# all compiled native objects (OCaml' runtime)
CMX := $(CMO:.cmo=.cmx)
# all compiled native objects (separated)
OBJ := $(CMO:.cmo=.o)

# compiled library
CMA := $(addsuffix .cma, $(PACKAGE))
# compiled native library (OCaml' runtime)
CMXA := $(addsuffix .cmxa, $(PACKAGE))
# compiled native library (separated)
LIB := $(addsuffix .a, $(PACKAGE))
# executable bytecode
BYTE := $(addsuffix .byte$(EXEEXT), $(PACKAGE))
# executable native bytecode
NATIVE := $(addsuffix .opt$(EXEEXT), $(PACKAGE))
# packed CMO, add to TARGET
CMOPK := $(addsuffix .cmo, undefined)
# packed CMX, add to TARGET
CMXPK := $(addsuffix .cmx, undefined)
# interface for packed object
CMIPK := $(addsuffix .cmi, undefined)
# object for linking
OPK := $(addsuffix .o, undefined)

# extra compiled native libraries used for native linking
tmp = $(EXTRA_CMA:.cma=.cmxa)
EXTRA_CMXA = $(tmp:.cmo=.cmx)

# sources for .cma linking
CMO4CMA = $(CMO)
# sources for .cmxa linking
CMX4CMXA = $(CMO4CMA:.cmo=.cmx)

DOCFILES = $(PACKAGE).ps $(PACKAGE).html

# build target
TARGET := $(MLI) $(CMI) $(CMA) $(CMXA) $(LIB) META

# OCaml parser called with flags
AM_P4FLAGS = -pp "$(CAMLP4OF) $(PARSER_INCLUDES)"
AM_P5FLAGS = -pp "$(CAMLP5O) $(PARSER_INCLUDES)"

# OCaml documentator called with flags
AM_DOCFLAGS = -html

# By default build with Camlp4
PXFLAGS = $(P4FLAGS)
CAMLPXLIB = $(CAMLP4LIB)

# bytecode compiling flags
AM_BFLAGS = $(MODULE_INCLUDES) $(DEBUG)
# native (optimized) compiling flags
AM_OFLAGS = $(MODULE_INCLUDES)

# extra .cmi to delete those are generated from .ml
CLEAN_CMI := $(CMO:.cmo=.cmi)
# other extra files to clean up
CLEAN_EXTRA := .depend
